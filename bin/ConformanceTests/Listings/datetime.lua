--[====[Generated by CreateTests.lua]====]
return function()
	return [[Function 0 (checkerr):
    6:   local stat, err = pcall(f, ...)
GETIMPORT R2 1 [pcall]
MOVE R3 R1
GETVARARGS R4 -1
CALL R2 -1 2
REMARK builtin assert/1
    7:   assert(not stat and string.find(err, msg, 1, true))
NOT R5 R2
JUMPIFNOT R5 L0
GETIMPORT R5 4 [string.find]
MOVE R6 R3
MOVE R7 R0
LOADN R8 1
LOADB R9 1
CALL R5 4 1
L0: FASTCALL1 1 R5 L1
GETIMPORT R4 6 [assert]
CALL R4 1 0
    8: end
L1: RETURN R0 0

Function 1 (checkDateTable):
   22:   local D = os.date("!*t", t)
GETIMPORT R1 2 [os.date]
LOADK R2 K3 ['!*t']
MOVE R3 R0
CALL R1 2 1
REMARK builtin assert/1
   23:   assert(os.time(D) == t)
GETIMPORT R4 5 [os.time]
MOVE R5 R1
CALL R4 1 1
JUMPIFEQ R4 R0 L0
LOADB R3 0 +1
L0: LOADB R3 1
L1: FASTCALL1 1 R3 L2
GETIMPORT R2 7 [assert]
CALL R2 1 0
   24:   local DC = os.date("!%Y %m %d %H %M %S %w %j"):split(" ")
L2: GETIMPORT R2 2 [os.date]
LOADK R3 K8 ['!%Y %m %d %H %M %S %w %j']
CALL R2 1 1
LOADK R4 K9 [' ']
NAMECALL R2 R2 K10 ['split']
CALL R2 2 1
REMARK builtin assert/1
   25:   assert(D.year == tonumber(DC[1]))
GETTABLEKS R5 R1 K11 ['year']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 1
CALL R6 1 1
JUMPIFEQ R5 R6 L3
LOADB R4 0 +1
L3: LOADB R4 1
L4: FASTCALL1 1 R4 L5
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   26:   assert(D.month == tonumber(DC[2]))
L5: GETTABLEKS R5 R1 K14 ['month']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 2
CALL R6 1 1
JUMPIFEQ R5 R6 L6
LOADB R4 0 +1
L6: LOADB R4 1
L7: FASTCALL1 1 R4 L8
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   27:   assert(D.day == tonumber(DC[3]))
L8: GETTABLEKS R5 R1 K15 ['day']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 3
CALL R6 1 1
JUMPIFEQ R5 R6 L9
LOADB R4 0 +1
L9: LOADB R4 1
L10: FASTCALL1 1 R4 L11
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   28:   assert(D.hour == tonumber(DC[4]))
L11: GETTABLEKS R5 R1 K16 ['hour']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 4
CALL R6 1 1
JUMPIFEQ R5 R6 L12
LOADB R4 0 +1
L12: LOADB R4 1
L13: FASTCALL1 1 R4 L14
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   29:   assert(D.min == tonumber(DC[5]))
L14: GETTABLEKS R5 R1 K17 ['min']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 5
CALL R6 1 1
JUMPIFEQ R5 R6 L15
LOADB R4 0 +1
L15: LOADB R4 1
L16: FASTCALL1 1 R4 L17
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   30:   assert(D.sec == tonumber(DC[6]))
L17: GETTABLEKS R5 R1 K18 ['sec']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 6
CALL R6 1 1
JUMPIFEQ R5 R6 L18
LOADB R4 0 +1
L18: LOADB R4 1
L19: FASTCALL1 1 R4 L20
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   31:   assert(D.wday == tonumber(DC[7]) + 1)
L20: GETTABLEKS R5 R1 K19 ['wday']
GETIMPORT R7 13 [tonumber]
GETTABLEN R8 R2 7
CALL R7 1 1
ADDK R6 R7 K20 [1]
JUMPIFEQ R5 R6 L21
LOADB R4 0 +1
L21: LOADB R4 1
L22: FASTCALL1 1 R4 L23
GETIMPORT R3 7 [assert]
CALL R3 1 0
REMARK builtin assert/1
   32:   assert(D.yday == tonumber(DC[8]))
L23: GETTABLEKS R5 R1 K21 ['yday']
GETIMPORT R6 13 [tonumber]
GETTABLEN R7 R2 8
CALL R6 1 1
JUMPIFEQ R5 R6 L24
LOADB R4 0 +1
L24: LOADB R4 1
L25: FASTCALL1 1 R4 L26
GETIMPORT R3 7 [assert]
CALL R3 1 0
   33: end
L26: RETURN R0 0

Function 2 (??):
    3: print "testing datetime library"
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing datetime library']
CALL R0 1 0
    5: local function checkerr (msg, f, ...)
DUPCLOSURE R0 K3 ['checkerr']
REMARK builtin assert/1
   10: assert(os.date("") == "")
GETIMPORT R3 6 [os.date]
LOADK R4 K7 ['']
CALL R3 1 1
JUMPXEQKS R3 K7 L0 ['']
LOADB R2 0 +1
L0: LOADB R2 1
L1: FASTCALL1 1 R2 L2
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
   11: assert(os.date("!") == "")
L2: GETIMPORT R3 6 [os.date]
LOADK R4 K10 ['!']
CALL R3 1 1
JUMPXEQKS R3 K7 L3 ['']
LOADB R2 0 +1
L3: LOADB R2 1
L4: FASTCALL1 1 R2 L5
GETIMPORT R1 9 [assert]
CALL R1 1 0
   12: local x = string.rep("a", 10000)
L5: GETIMPORT R1 13 [string.rep]
LOADK R2 K14 ['a']
LOADN R3 10000
CALL R1 2 1
REMARK builtin assert/1
   13: assert(os.date(x) == x)
GETIMPORT R4 6 [os.date]
MOVE R5 R1
CALL R4 1 1
JUMPIFEQ R4 R1 L6
LOADB R3 0 +1
L6: LOADB R3 1
L7: FASTCALL1 1 R3 L8
GETIMPORT R2 9 [assert]
CALL R2 1 0
   14: local t = os.time()
L8: GETIMPORT R2 16 [os.time]
CALL R2 0 1
   15: D = os.date("*t", t)
GETIMPORT R3 6 [os.date]
LOADK R4 K17 ['*t']
MOVE R5 R2
CALL R3 2 1
SETGLOBAL R3 K18 ['D']
REMARK builtin assert/1
   16: assert(os.date(string.rep("%d", 1000), t) ==
GETIMPORT R5 6 [os.date]
GETIMPORT R6 13 [string.rep]
LOADK R7 K19 ['%d']
LOADN R8 1000
CALL R6 2 1
MOVE R7 R2
CALL R5 2 1
   17:        string.rep(os.date("%d", t), 1000))
GETIMPORT R6 13 [string.rep]
GETIMPORT R7 6 [os.date]
LOADK R8 K19 ['%d']
MOVE R9 R2
CALL R7 2 1
LOADN R8 1000
CALL R6 2 1
JUMPIFEQ R5 R6 L9
LOADB R4 0 +1
L9: LOADB R4 1
L10: FASTCALL1 1 R4 L11
   16: assert(os.date(string.rep("%d", 1000), t) ==
GETIMPORT R3 9 [assert]
CALL R3 1 0
REMARK builtin assert/1
   18: assert(os.date(string.rep("%", 200)) == string.rep("%", 100))
L11: GETIMPORT R5 6 [os.date]
GETIMPORT R6 13 [string.rep]
LOADK R7 K20 ['%']
LOADN R8 200
CALL R6 2 -1
CALL R5 -1 1
GETIMPORT R6 13 [string.rep]
LOADK R7 K20 ['%']
LOADN R8 100
CALL R6 2 1
JUMPIFEQ R5 R6 L12
LOADB R4 0 +1
L12: LOADB R4 1
L13: FASTCALL1 1 R4 L14
GETIMPORT R3 9 [assert]
CALL R3 1 0
REMARK builtin assert/1
   19: assert(os.date("", -1) == nil)
L14: GETIMPORT R5 6 [os.date]
LOADK R6 K7 ['']
LOADN R7 -1
CALL R5 2 1
JUMPXEQKNIL R5 L15
LOADB R4 0 +1
L15: LOADB R4 1
L16: FASTCALL1 1 R4 L17
GETIMPORT R3 9 [assert]
CALL R3 1 0
   21: local function checkDateTable (t)
L17: DUPCLOSURE R3 K21 ['checkDateTable']
   35: checkDateTable(os.time())
MOVE R4 R3
GETIMPORT R5 16 [os.time]
CALL R5 0 -1
CALL R4 -1 0
   37: checkerr("invalid conversion specifier", os.date, "%9")
MOVE R4 R0
LOADK R5 K22 ['invalid conversion specifier']
GETIMPORT R6 6 [os.date]
LOADK R7 K23 ['%9']
CALL R4 3 0
   38: checkerr("invalid conversion specifier", os.date, "%O")
MOVE R4 R0
LOADK R5 K22 ['invalid conversion specifier']
GETIMPORT R6 6 [os.date]
LOADK R7 K24 ['%O']
CALL R4 3 0
   39: checkerr("invalid conversion specifier", os.date, "%E")
MOVE R4 R0
LOADK R5 K22 ['invalid conversion specifier']
GETIMPORT R6 6 [os.date]
LOADK R7 K25 ['%E']
CALL R4 3 0
   40: checkerr("invalid conversion specifier", os.date, "%Ea")
MOVE R4 R0
LOADK R5 K22 ['invalid conversion specifier']
GETIMPORT R6 6 [os.date]
LOADK R7 K26 ['%Ea']
CALL R4 3 0
   42: checkerr("missing", os.time, {hour = 12})   -- missing date
MOVE R4 R0
LOADK R5 K27 ['missing']
GETIMPORT R6 16 [os.time]
REMARK allocation: table template 1
DUPTABLE R7 29
LOADN R8 12
SETTABLEKS R8 R7 K28 ['hour']
CALL R4 3 0
   45:   local D = os.date("*t")
GETIMPORT R4 6 [os.date]
LOADK R5 K17 ['*t']
CALL R4 1 1
   46:   local t = os.time(D)
GETIMPORT R5 16 [os.time]
MOVE R6 R4
CALL R5 1 1
   47:   if D.isdst == nil then
GETTABLEKS R6 R4 K30 ['isdst']
JUMPXEQKNIL R6 L18 NOT
   48:     print("no daylight saving information")
GETIMPORT R6 1 [print]
LOADK R7 K31 ['no daylight saving information']
CALL R6 1 0
JUMP L22
REMARK builtin assert/1
REMARK builtin type/1
   50:     assert(type(D.isdst) == 'boolean')
L18: GETTABLEKS R9 R4 K30 ['isdst']
FASTCALL1 40 R9 L19
GETIMPORT R8 33 [type]
CALL R8 1 1
L19: JUMPXEQKS R8 K34 L20 ['boolean']
LOADB R7 0 +1
L20: LOADB R7 1
L21: FASTCALL1 1 R7 L22
GETIMPORT R6 9 [assert]
CALL R6 1 0
   52:   D.isdst = nil
L22: LOADNIL R6
SETTABLEKS R6 R4 K30 ['isdst']
   53:   local t1 = os.time(D)
GETIMPORT R6 16 [os.time]
MOVE R7 R4
CALL R6 1 1
REMARK builtin assert/1
   54:   assert(t == t1)   -- if isdst is absent uses correct default
JUMPIFEQ R5 R6 L23
LOADB R8 0 +1
L23: LOADB R8 1
L24: FASTCALL1 1 R8 L25
GETIMPORT R7 9 [assert]
CALL R7 1 0
   57: local D = os.date("*t")
L25: GETIMPORT R4 6 [os.date]
LOADK R5 K17 ['*t']
CALL R4 1 1
   58: t = os.time(D)
GETIMPORT R5 16 [os.time]
MOVE R6 R4
CALL R5 1 1
MOVE R2 R5
   59: D.year = D.year-1;
GETTABLEKS R6 R4 K36 ['year']
SUBK R5 R6 K35 [1]
SETTABLEKS R5 R4 K36 ['year']
   60: local t1 = os.time(D)
GETIMPORT R5 16 [os.time]
MOVE R6 R4
CALL R5 1 1
REMARK builtin assert/1
REMARK builtin math.abs/1
   62: assert(math.abs(os.difftime(t,t1)/(24*3600) - 365) < 2)
GETIMPORT R11 40 [os.difftime]
MOVE R12 R2
MOVE R13 R5
CALL R11 2 1
DIVK R10 R11 K38 [86400]
SUBK R9 R10 K37 [365]
FASTCALL1 2 R9 L26
GETIMPORT R8 43 [math.abs]
CALL R8 1 1
L26: LOADN R9 2
JUMPIFLT R8 R9 L27
LOADB R7 0 +1
L27: LOADB R7 1
L28: FASTCALL1 1 R7 L29
GETIMPORT R6 9 [assert]
CALL R6 1 0
   65: t = os.time()
L29: GETIMPORT R6 16 [os.time]
CALL R6 0 1
MOVE R2 R6
   66: t1 = os.time(os.date("!*t"))
GETIMPORT R6 16 [os.time]
GETIMPORT R7 6 [os.date]
LOADK R8 K44 ['!*t']
CALL R7 1 -1
CALL R6 -1 1
MOVE R5 R6
   67: local diff = os.difftime(t1,t)
GETIMPORT R6 40 [os.difftime]
MOVE R7 R5
MOVE R8 R2
CALL R6 2 1
REMARK builtin assert/1
   68: assert(0 <= diff and diff <= 1)
LOADB R8 0
LOADN R9 0
JUMPIFNOTLE R9 R6 L31
LOADN R9 1
JUMPIFLE R6 R9 L30
LOADB R8 0 +1
L30: LOADB R8 1
L31: FASTCALL1 1 R8 L32
GETIMPORT R7 9 [assert]
CALL R7 1 0
   69: diff = os.difftime(t,t1)
L32: GETIMPORT R7 40 [os.difftime]
MOVE R8 R2
MOVE R9 R5
CALL R7 2 1
MOVE R6 R7
REMARK builtin assert/1
   70: assert(-1 <= diff and diff <= 0)
LOADB R8 0
LOADN R9 -1
JUMPIFNOTLE R9 R6 L34
LOADN R9 0
JUMPIFLE R6 R9 L33
LOADB R8 0 +1
L33: LOADB R8 1
L34: FASTCALL1 1 R8 L35
GETIMPORT R7 9 [assert]
CALL R7 1 0
   72: local t1 = os.time{year=2000, month=10, day=1, hour=23, min=12}
L35: GETIMPORT R7 16 [os.time]
REMARK allocation: table template 5
DUPTABLE R8 48
LOADN R9 2000
SETTABLEKS R9 R8 K36 ['year']
LOADN R9 10
SETTABLEKS R9 R8 K45 ['month']
LOADN R9 1
SETTABLEKS R9 R8 K46 ['day']
LOADN R9 23
SETTABLEKS R9 R8 K28 ['hour']
LOADN R9 12
SETTABLEKS R9 R8 K47 ['min']
CALL R7 1 1
   73: local t2 = os.time{year=2000, month=10, day=1, hour=23, min=10, sec=19}
GETIMPORT R8 16 [os.time]
REMARK allocation: table template 6
DUPTABLE R9 50
LOADN R10 2000
SETTABLEKS R10 R9 K36 ['year']
LOADN R10 10
SETTABLEKS R10 R9 K45 ['month']
LOADN R10 1
SETTABLEKS R10 R9 K46 ['day']
LOADN R10 23
SETTABLEKS R10 R9 K28 ['hour']
LOADN R10 10
SETTABLEKS R10 R9 K47 ['min']
LOADN R10 19
SETTABLEKS R10 R9 K49 ['sec']
CALL R8 1 1
REMARK builtin assert/1
   74: assert(os.difftime(t1,t2) == 60*2-19)
GETIMPORT R11 40 [os.difftime]
MOVE R12 R7
MOVE R13 R8
CALL R11 2 1
JUMPXEQKN R11 K51 L36 [101]
LOADB R10 0 +1
L36: LOADB R10 1
L37: FASTCALL1 1 R10 L38
GETIMPORT R9 9 [assert]
CALL R9 1 0
REMARK builtin assert/1
   76: assert(os.time({ year = 1970, day = 1, month = 1, hour = 0}) == 0)
L38: GETIMPORT R11 16 [os.time]
REMARK allocation: table template 4
DUPTABLE R12 52
LOADN R13 1970
SETTABLEKS R13 R12 K36 ['year']
LOADN R13 1
SETTABLEKS R13 R12 K46 ['day']
LOADN R13 1
SETTABLEKS R13 R12 K45 ['month']
LOADN R13 0
SETTABLEKS R13 R12 K28 ['hour']
CALL R11 1 1
JUMPXEQKN R11 K53 L39 [0]
LOADB R10 0 +1
L39: LOADB R10 1
L40: FASTCALL1 1 R10 L41
GETIMPORT R9 9 [assert]
CALL R9 1 0
   78: print 'OK'
L41: GETIMPORT R9 1 [print]
LOADK R10 K54 ['OK']
CALL R9 1 0
   79: 
RETURN R0 0

]]
end