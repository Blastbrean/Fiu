--[====[Generated by CreateTests.lua]====]
return function()
	return [[Function 0 (f):
REMARK builtin select/2+
   22:   if select('#', ...) == 1 then
LOADK R1 K0 ['#']
FASTCALL1 57 R1 L0
GETIMPORT R0 2 [select]
GETVARARGS R2 -1
CALL R0 -1 1
L0: JUMPXEQKN R0 K3 L1 NOT [1]
   23:     return (...)
GETVARARGS R0 1
RETURN R0 1
   25:     return "***"
L1: LOADK R0 K4 ['***']
RETURN R0 1

Function 1 (eq):
   66:   if not limit then limit = 10E-10 end
JUMPIF R2 L0
LOADK R2 K0 [1.0000000000000001e-09]
REMARK builtin math.abs/1
   67:   return math.abs(a-b) <= limit
L0: SUB R5 R0 R1
FASTCALL1 2 R5 L1
GETIMPORT R4 3 [math.abs]
CALL R4 1 1
L1: JUMPIFLE R4 R2 L2
LOADB R3 0 +1
L2: LOADB R3 1
L3: RETURN R3 1

Function 2 (testbit):
  100:   return a/2^n % 2 >= 1
LOADN R6 2
POW R5 R6 R1
DIV R4 R0 R5
MODK R3 R4 K0 [2]
LOADN R4 1
JUMPIFLE R4 R3 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 3 (??):
  184:   assert(not pcall(function () a[NaN] = 1 end))
GETUPVAL R0 0
GETUPVAL R1 1
LOADN R2 1
SETTABLE R2 R0 R1
RETURN R0 0

Function 4 (??):
  187:   assert(not pcall(function () a[NaN] = 1 end))
GETUPVAL R0 0
GETUPVAL R1 1
LOADN R2 1
SETTABLE R2 R0 R1
RETURN R0 0

Function 5 (??):
    3: print("testing numbers and math lib")
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing numbers and math lib']
CALL R0 1 0
REMARK builtin assert/1
    7:   assert(a+b == 5 and -b == -3 and b+"2" == 5 and "10"-c == 0)
LOADB R1 0
LOADK R3 K3 ['2']
LOADK R4 K4 [' 3e0 ']
ADD R2 R3 R4
JUMPXEQKN R2 K5 L1 NOT [5]
LOADB R1 0
LOADK R3 K4 [' 3e0 ']
MINUS R2 R3
JUMPXEQKN R2 K6 L1 NOT [-3]
LOADB R1 0
LOADK R3 K4 [' 3e0 ']
LOADK R4 K3 ['2']
ADD R2 R3 R4
JUMPXEQKN R2 K5 L1 NOT [5]
LOADK R3 K7 ['10']
LOADK R4 K8 [' 10  ']
SUB R2 R3 R4
JUMPXEQKN R2 K9 L0 [0]
LOADB R1 0 +1
L0: LOADB R1 1
L1: FASTCALL1 1 R1 L2
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
    8:   assert(type(a) == 'string' and type(b) == 'string' and type(c) == 'string')
L2: LOADB R1 0
REMARK builtin type/1
LOADK R3 K3 ['2']
FASTCALL1 40 R3 L3
GETIMPORT R2 13 [type]
CALL R2 1 1
L3: JUMPXEQKS R2 K14 L7 NOT ['string']
LOADB R1 0
REMARK builtin type/1
LOADK R3 K4 [' 3e0 ']
FASTCALL1 40 R3 L4
GETIMPORT R2 13 [type]
CALL R2 1 1
L4: JUMPXEQKS R2 K14 L7 NOT ['string']
REMARK builtin type/1
LOADK R3 K8 [' 10  ']
FASTCALL1 40 R3 L5
GETIMPORT R2 13 [type]
CALL R2 1 1
L5: JUMPXEQKS R2 K14 L6 ['string']
LOADB R1 0 +1
L6: LOADB R1 1
L7: FASTCALL1 1 R1 L8
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
    9:   assert(a == "2" and b == " 3e0 " and c == " 10  " and -c == -"  10 ")
L8: LOADK R3 K8 [' 10  ']
MINUS R2 R3
LOADK R4 K15 ['  10 ']
MINUS R3 R4
JUMPIFEQ R2 R3 L9
LOADB R1 0 +1
L9: LOADB R1 1
L10: FASTCALL1 1 R1 L11
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   10:   assert(c%a == 0 and a^b == 8)
L11: LOADB R1 0
LOADK R3 K8 [' 10  ']
LOADK R4 K3 ['2']
MOD R2 R3 R4
JUMPXEQKN R2 K9 L13 NOT [0]
LOADK R3 K3 ['2']
LOADK R4 K4 [' 3e0 ']
POW R2 R3 R4
JUMPXEQKN R2 K16 L12 [8]
LOADB R1 0 +1
L12: LOADB R1 1
L13: FASTCALL1 1 R1 L14
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin math.modf/1
   15:   local a,b = math.modf(3.5)
L14: LOADK R1 K17 [3.5]
FASTCALL1 20 R1 L15
GETIMPORT R0 20 [math.modf]
CALL R0 1 2
REMARK builtin assert/1
   16:   assert(a == 3 and b == 0.5)
L15: LOADB R3 0
JUMPXEQKN R0 K21 L17 NOT [3]
JUMPXEQKN R1 K22 L16 [0.5]
LOADB R3 0 +1
L16: LOADB R3 1
L17: FASTCALL1 1 R3 L18
GETIMPORT R2 11 [assert]
CALL R2 1 0
REMARK builtin assert/1
   17:   assert(math.huge > 10e30)
L18: GETIMPORT R4 24 [math.huge]
LOADK R5 K25 [9.9999999999999996e+30]
JUMPIFLT R5 R4 L19
LOADB R3 0 +1
L19: LOADB R3 1
L20: FASTCALL1 1 R3 L21
GETIMPORT R2 11 [assert]
CALL R2 1 0
REMARK builtin assert/1
   18:   assert(-math.huge < -10e30)
L21: GETIMPORT R5 24 [math.huge]
MINUS R4 R5
LOADK R5 K26 [-9.9999999999999996e+30]
JUMPIFLT R4 R5 L22
LOADB R3 0 +1
L22: LOADB R3 1
L23: FASTCALL1 1 R3 L24
GETIMPORT R2 11 [assert]
CALL R2 1 0
   21: function f(...)
L24: DUPCLOSURE R0 K27 ['f']
SETGLOBAL R0 K28 ['f']
REMARK builtin assert/1
   29: assert(pcall(tonumber) == false)
GETIMPORT R2 30 [pcall]
GETIMPORT R3 32 [tonumber]
CALL R2 1 1
JUMPXEQKB R2 0 L25
LOADB R1 0 +1
L25: LOADB R1 1
L26: FASTCALL1 1 R1 L27
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   30: assert(tonumber{} == nil)
L27: GETIMPORT R2 32 [tonumber]
REMARK allocation: table hash 0
NEWTABLE R3 0 0
CALL R2 1 1
JUMPXEQKNIL R2 L28
LOADB R1 0 +1
L28: LOADB R1 1
L29: FASTCALL1 1 R1 L30
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   31: assert(tonumber'+0.01' == 1/100 and tonumber'+.01' == 0.01 and
L30: LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K33 ['+0.01']
CALL R2 1 1
JUMPXEQKN R2 K34 L32 NOT [0.01]
LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K35 ['+.01']
CALL R2 1 1
JUMPXEQKN R2 K34 L32 NOT [0.01]
LOADB R1 0
   32:        tonumber'.01' == 0.01    and tonumber'-1.' == -1 and
GETIMPORT R2 32 [tonumber]
LOADK R3 K36 ['.01']
CALL R2 1 1
JUMPXEQKN R2 K34 L32 NOT [0.01]
LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K37 ['-1.']
CALL R2 1 1
JUMPXEQKN R2 K38 L32 NOT [-1]
   33:        tonumber'+1.' == 1)
GETIMPORT R2 32 [tonumber]
LOADK R3 K39 ['+1.']
CALL R2 1 1
JUMPXEQKN R2 K40 L31 [1]
LOADB R1 0 +1
L31: LOADB R1 1
L32: FASTCALL1 1 R1 L33
   31: assert(tonumber'+0.01' == 1/100 and tonumber'+.01' == 0.01 and
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   34: assert(tonumber'+ 0.01' == nil and tonumber'+.e1' == nil and
L33: LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K41 ['+ 0.01']
CALL R2 1 1
JUMPXEQKNIL R2 L35 NOT
LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K42 ['+.e1']
CALL R2 1 1
JUMPXEQKNIL R2 L35 NOT
LOADB R1 0
   35:        tonumber'1e' == nil     and tonumber'1.0e+' == nil and
GETIMPORT R2 32 [tonumber]
LOADK R3 K43 ['1e']
CALL R2 1 1
JUMPXEQKNIL R2 L35 NOT
LOADB R1 0
GETIMPORT R2 32 [tonumber]
LOADK R3 K44 ['1.0e+']
CALL R2 1 1
JUMPXEQKNIL R2 L35 NOT
   36:        tonumber'.' == nil)
GETIMPORT R2 32 [tonumber]
LOADK R3 K45 ['.']
CALL R2 1 1
JUMPXEQKNIL R2 L34
LOADB R1 0 +1
L34: LOADB R1 1
L35: FASTCALL1 1 R1 L36
   34: assert(tonumber'+ 0.01' == nil and tonumber'+.e1' == nil and
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   37: assert(tonumber('-12') == -10-2)
L36: GETIMPORT R2 32 [tonumber]
LOADK R3 K46 ['-12']
CALL R2 1 1
JUMPXEQKN R2 K47 L37 [-12]
LOADB R1 0 +1
L37: LOADB R1 1
L38: FASTCALL1 1 R1 L39
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   38: assert(tonumber('-1.2e2') == - - -120)
L39: GETIMPORT R2 32 [tonumber]
LOADK R3 K48 ['-1.2e2']
CALL R2 1 1
JUMPXEQKN R2 K49 L40 [-120]
LOADB R1 0 +1
L40: LOADB R1 1
L41: FASTCALL1 1 R1 L42
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   39: assert(f(tonumber('1  a')) == nil)
L42: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K50 ['1  a']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L43
LOADB R1 0 +1
L43: LOADB R1 1
L44: FASTCALL1 1 R1 L45
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   40: assert(f(tonumber('e1')) == nil)
L45: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K51 ['e1']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L46
LOADB R1 0 +1
L46: LOADB R1 1
L47: FASTCALL1 1 R1 L48
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   41: assert(f(tonumber('e  1')) == nil)
L48: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K52 ['e  1']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L49
LOADB R1 0 +1
L49: LOADB R1 1
L50: FASTCALL1 1 R1 L51
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   42: assert(f(tonumber(' 3.4.5 ')) == nil)
L51: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K53 [' 3.4.5 ']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L52
LOADB R1 0 +1
L52: LOADB R1 1
L53: FASTCALL1 1 R1 L54
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   43: assert(f(tonumber('')) == nil)
L54: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K54 ['']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L55
LOADB R1 0 +1
L55: LOADB R1 1
L56: FASTCALL1 1 R1 L57
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   44: assert(f(tonumber('', 8)) == nil)
L57: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K54 ['']
LOADN R5 8
CALL R3 2 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L58
LOADB R1 0 +1
L58: LOADB R1 1
L59: FASTCALL1 1 R1 L60
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   45: assert(f(tonumber('  ')) == nil)
L60: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K55 ['  ']
CALL R3 1 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L61
LOADB R1 0 +1
L61: LOADB R1 1
L62: FASTCALL1 1 R1 L63
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   46: assert(f(tonumber('  ', 9)) == nil)
L63: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K55 ['  ']
LOADN R5 9
CALL R3 2 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L64
LOADB R1 0 +1
L64: LOADB R1 1
L65: FASTCALL1 1 R1 L66
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   47: assert(f(tonumber('99', 8)) == nil)
L66: GETGLOBAL R2 K28 ['f']
GETIMPORT R3 32 [tonumber]
LOADK R4 K56 ['99']
LOADN R5 8
CALL R3 2 -1
CALL R2 -1 1
JUMPXEQKNIL R2 L67
LOADB R1 0 +1
L67: LOADB R1 1
L68: FASTCALL1 1 R1 L69
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   48: assert(tonumber('  1010  ', 2) == 10)
L69: GETIMPORT R2 32 [tonumber]
LOADK R3 K57 ['  1010  ']
LOADN R4 2
CALL R2 2 1
JUMPXEQKN R2 K58 L70 [10]
LOADB R1 0 +1
L70: LOADB R1 1
L71: FASTCALL1 1 R1 L72
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   49: assert(tonumber('10', 36) == 36)
L72: GETIMPORT R2 32 [tonumber]
LOADK R3 K7 ['10']
LOADN R4 36
CALL R2 2 1
JUMPXEQKN R2 K59 L73 [36]
LOADB R1 0 +1
L73: LOADB R1 1
L74: FASTCALL1 1 R1 L75
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   52: assert(tonumber('fFfa', 15) == nil)
L75: GETIMPORT R2 32 [tonumber]
LOADK R3 K60 ['fFfa']
LOADN R4 15
CALL R2 2 1
JUMPXEQKNIL R2 L76
LOADB R1 0 +1
L76: LOADB R1 1
L77: FASTCALL1 1 R1 L78
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   54: assert(tonumber(string.rep('1', 32), 2) + 1 == 2^32)
L78: GETIMPORT R3 32 [tonumber]
GETIMPORT R4 62 [string.rep]
LOADK R5 K63 ['1']
LOADN R6 32
CALL R4 2 1
LOADN R5 2
CALL R3 2 1
ADDK R2 R3 K40 [1]
JUMPXEQKN R2 K64 L79 [4294967296]
LOADB R1 0 +1
L79: LOADB R1 1
L80: FASTCALL1 1 R1 L81
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   56: assert(tonumber('ffffFFFF', 16)+1 == 2^32)
L81: GETIMPORT R3 32 [tonumber]
LOADK R4 K65 ['ffffFFFF']
LOADN R5 16
CALL R3 2 1
ADDK R2 R3 K40 [1]
JUMPXEQKN R2 K64 L82 [4294967296]
LOADB R1 0 +1
L82: LOADB R1 1
L83: FASTCALL1 1 R1 L84
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   58: assert(1.1 == 1.+.1)
L84: LOADB R1 1
FASTCALL1 1 R1 L85
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   59: assert(100.0 == 1E2 and .01 == 1e-2)
L85: LOADB R1 1
FASTCALL1 1 R1 L86
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   60: assert(1111111111111111-1111111111111110== 1000.00e-03)
L86: LOADB R1 1
FASTCALL1 1 R1 L87
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   62: assert(1.1 == '1.'+'.1')
L87: LOADK R3 K66 ['1.']
LOADK R4 K67 ['.1']
ADD R2 R3 R4
JUMPXEQKN R2 K68 L88 [1.1000000000000001]
LOADB R1 0 +1
L88: LOADB R1 1
L89: FASTCALL1 1 R1 L90
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   63: assert('1111111111111111'-'1111111111111110' == tonumber"  +0.001e+3 \n\t")
L90: LOADK R3 K69 ['1111111111111111']
LOADK R4 K70 ['1111111111111110']
SUB R2 R3 R4
GETIMPORT R3 32 [tonumber]
LOADK R4 K71 []
CALL R3 1 1
JUMPIFEQ R2 R3 L91
LOADB R1 0 +1
L91: LOADB R1 1
L92: FASTCALL1 1 R1 L93
GETIMPORT R0 11 [assert]
CALL R0 1 0
   65: function eq (a,b,limit)
L93: DUPCLOSURE R0 K72 ['eq']
SETGLOBAL R0 K73 ['eq']
REMARK builtin assert/1
   70: assert(0.1e-30 > 0.9E-31 and 0.9E30 < 0.1e31)
LOADB R1 1
FASTCALL1 1 R1 L94
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   72: assert(0.123456 > 0.123455)
L94: LOADB R1 1
FASTCALL1 1 R1 L95
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   74: assert(tonumber('+1.23E30') == 1.23*10^30)
L95: GETIMPORT R2 32 [tonumber]
LOADK R3 K74 ['+1.23E30']
CALL R2 1 1
JUMPXEQKN R2 K75 L96 [1.23e+30]
LOADB R1 0 +1
L96: LOADB R1 1
L97: FASTCALL1 1 R1 L98
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   77: assert(not(1<1) and (1<2) and not(2<1))
L98: LOADB R1 1
FASTCALL1 1 R1 L99
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   78: assert(not('a'<'a') and ('a'<'b') and not('b'<'a'))
L99: LOADK R3 K76 ['a']
LOADK R4 K76 ['a']
JUMPIFLT R3 R4 L100
LOADB R2 0 +1
L100: LOADB R2 1
L101: NOT R1 R2
JUMPIFNOT R1 L104
LOADB R1 0
LOADK R2 K76 ['a']
LOADK R3 K77 ['b']
JUMPIFNOTLT R2 R3 L104
LOADK R3 K77 ['b']
LOADK R4 K76 ['a']
JUMPIFLT R3 R4 L102
LOADB R2 0 +1
L102: LOADB R2 1
L103: NOT R1 R2
L104: FASTCALL1 1 R1 L105
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   79: assert((1<=1) and (1<=2) and not(2<=1))
L105: LOADB R1 1
FASTCALL1 1 R1 L106
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   80: assert(('a'<='a') and ('a'<='b') and not('b'<='a'))
L106: LOADB R1 0
LOADK R2 K76 ['a']
LOADK R3 K76 ['a']
JUMPIFNOTLE R2 R3 L109
LOADB R1 0
LOADK R2 K76 ['a']
LOADK R3 K77 ['b']
JUMPIFNOTLE R2 R3 L109
LOADK R3 K77 ['b']
LOADK R4 K76 ['a']
JUMPIFLE R3 R4 L107
LOADB R2 0 +1
L107: LOADB R2 1
L108: NOT R1 R2
L109: FASTCALL1 1 R1 L110
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   81: assert(not(1>1) and not(1>2) and (2>1))
L110: LOADB R1 1
FASTCALL1 1 R1 L111
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   82: assert(not('a'>'a') and not('a'>'b') and ('b'>'a'))
L111: LOADK R3 K76 ['a']
LOADK R4 K76 ['a']
JUMPIFLT R4 R3 L112
LOADB R2 0 +1
L112: LOADB R2 1
L113: NOT R1 R2
JUMPIFNOT R1 L117
LOADK R3 K76 ['a']
LOADK R4 K77 ['b']
JUMPIFLT R4 R3 L114
LOADB R2 0 +1
L114: LOADB R2 1
L115: NOT R1 R2
JUMPIFNOT R1 L117
LOADK R2 K77 ['b']
LOADK R3 K76 ['a']
JUMPIFLT R3 R2 L116
LOADB R1 0 +1
L116: LOADB R1 1
L117: FASTCALL1 1 R1 L118
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   83: assert((1>=1) and not(1>=2) and (2>=1))
L118: LOADB R1 1
FASTCALL1 1 R1 L119
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   84: assert(('a'>='a') and not('a'>='b') and ('b'>='a'))
L119: LOADB R1 0
LOADK R2 K76 ['a']
LOADK R3 K76 ['a']
JUMPIFNOTLE R3 R2 L123
LOADK R3 K76 ['a']
LOADK R4 K77 ['b']
JUMPIFLE R4 R3 L120
LOADB R2 0 +1
L120: LOADB R2 1
L121: NOT R1 R2
JUMPIFNOT R1 L123
LOADK R2 K77 ['b']
LOADK R3 K76 ['a']
JUMPIFLE R3 R2 L122
LOADB R1 0 +1
L122: LOADB R1 1
L123: FASTCALL1 1 R1 L124
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   87: assert(-4%3 == 2)
L124: LOADB R1 1
FASTCALL1 1 R1 L125
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   88: assert(4%-3 == -2)
L125: LOADB R1 1
FASTCALL1 1 R1 L126
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   89: assert(math.pi - math.pi % 1 == 3)
L126: GETIMPORT R3 79 [math.pi]
GETIMPORT R5 79 [math.pi]
MODK R4 R5 K40 [1]
SUB R2 R3 R4
JUMPXEQKN R2 K21 L127 [3]
LOADB R1 0 +1
L127: LOADB R1 1
L128: FASTCALL1 1 R1 L129
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   90: assert(math.pi - math.pi % 0.001 == 3.141)
L129: GETIMPORT R3 79 [math.pi]
GETIMPORT R5 79 [math.pi]
MODK R4 R5 K80 [0.001]
SUB R2 R3 R4
JUMPXEQKN R2 K81 L130 [3.141]
LOADB R1 0 +1
L130: LOADB R1 1
L131: FASTCALL1 1 R1 L132
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   94:   assert(a ~= a) -- Expect NaN
L132: LOADB R1 1
FASTCALL1 1 R1 L133
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   95:   assert(((2^53+1) % 2) == 0)
L133: LOADB R1 1
FASTCALL1 1 R1 L134
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   96:   assert((1234 % (2^53+1)) == 1234)
L134: LOADB R1 1
FASTCALL1 1 R1 L135
GETIMPORT R0 11 [assert]
CALL R0 1 0
   99: local function testbit(a, n)
L135: DUPCLOSURE R0 K82 ['testbit']
REMARK builtin assert/1+
  103: assert(eq(math.sin(-9.8)^2 + math.cos(-9.8)^2, 1))
GETGLOBAL R2 K73 ['eq']
REMARK builtin math.sin/1
LOADK R6 K84 [-9.8000000000000007]
FASTCALL1 24 R6 L136
GETIMPORT R5 86 [math.sin]
CALL R5 1 1
L136: POWK R4 R5 K83 [2]
REMARK builtin math.cos/1
LOADK R7 K84 [-9.8000000000000007]
FASTCALL1 9 R7 L137
GETIMPORT R6 88 [math.cos]
CALL R6 1 1
L137: POWK R5 R6 K83 [2]
ADD R3 R4 R5
LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L138
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  104: assert(eq(math.tan(math.pi/4), 1))
L138: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.tan/1
GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K89 [4]
FASTCALL1 27 R4 L139
GETIMPORT R3 91 [math.tan]
CALL R3 1 1
L139: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L140
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1
  105: assert(eq(math.sin(math.pi/2), 1) and eq(math.cos(math.pi/2), 0))
L140: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.sin/1
GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
FASTCALL1 24 R4 L141
GETIMPORT R3 86 [math.sin]
CALL R3 1 1
L141: LOADN R4 1
CALL R2 2 1
JUMPIFNOT R2 L143
GETGLOBAL R2 K73 ['eq']
REMARK builtin math.cos/1
GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
FASTCALL1 9 R4 L142
GETIMPORT R3 88 [math.cos]
CALL R3 1 1
L142: LOADN R4 0
CALL R2 2 1
L143: FASTCALL1 1 R2 L144
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  106: assert(eq(math.atan(1), math.pi/4) and eq(math.acos(0), math.pi/2) and
L144: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.atan/1
LOADN R4 1
FASTCALL1 6 R4 L145
GETIMPORT R3 93 [math.atan]
CALL R3 1 1
L145: GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K89 [4]
CALL R2 2 1
JUMPIFNOT R2 L148
GETGLOBAL R2 K73 ['eq']
REMARK builtin math.acos/1
LOADN R4 0
FASTCALL1 3 R4 L146
GETIMPORT R3 95 [math.acos]
CALL R3 1 1
L146: GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
CALL R2 2 1
JUMPIFNOT R2 L148
  107:        eq(math.asin(1), math.pi/2))
GETGLOBAL R2 K73 ['eq']
REMARK builtin math.asin/1
LOADN R4 1
FASTCALL1 4 R4 L147
GETIMPORT R3 97 [math.asin]
CALL R3 1 1
L147: GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
CALL R2 2 1
L148: FASTCALL1 1 R2 L149
  106: assert(eq(math.atan(1), math.pi/4) and eq(math.acos(0), math.pi/2) and
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  108: assert(eq(math.deg(math.pi/2), 90) and eq(math.rad(90), math.pi/2))
L149: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.deg/1
GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
FASTCALL1 10 R4 L150
GETIMPORT R3 99 [math.deg]
CALL R3 1 1
L150: LOADN R4 90
CALL R2 2 1
JUMPIFNOT R2 L152
GETGLOBAL R2 K73 ['eq']
REMARK builtin math.rad/1
LOADN R4 90
FASTCALL1 22 R4 L151
GETIMPORT R3 101 [math.rad]
CALL R3 1 1
L151: GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
CALL R2 2 1
L152: FASTCALL1 1 R2 L153
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin math.abs/1
  109: assert(math.abs(-10) == 10)
L153: LOADN R4 -10
FASTCALL1 2 R4 L154
GETIMPORT R3 103 [math.abs]
CALL R3 1 1
L154: JUMPXEQKN R3 K58 L155 [10]
LOADB R2 0 +1
L155: LOADB R2 1
L156: FASTCALL1 1 R2 L157
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1+
  110: assert(eq(math.atan2(1,0), math.pi/2))
L157: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.atan2/2
LOADN R4 1
FASTCALL2K 5 R4 K9 L158 [0]
LOADK R5 K9 [0]
GETIMPORT R3 105 [math.atan2]
CALL R3 2 1
L158: GETIMPORT R5 79 [math.pi]
DIVK R4 R5 K83 [2]
CALL R2 2 -1
FASTCALL 1 L159
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1
REMARK builtin math.ceil/1
  111: assert(math.ceil(4.5) == 5.0)
L159: LOADK R4 K106 [4.5]
FASTCALL1 7 R4 L160
GETIMPORT R3 108 [math.ceil]
CALL R3 1 1
L160: JUMPXEQKN R3 K5 L161 [5]
LOADB R2 0 +1
L161: LOADB R2 1
L162: FASTCALL1 1 R2 L163
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin math.floor/1
  112: assert(math.floor(4.5) == 4.0)
L163: LOADK R4 K106 [4.5]
FASTCALL1 12 R4 L164
GETIMPORT R3 110 [math.floor]
CALL R3 1 1
L164: JUMPXEQKN R3 K89 L165 [4]
LOADB R2 0 +1
L165: LOADB R2 1
L166: FASTCALL1 1 R2 L167
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  113: assert(10 % 3 == 1)
L167: LOADB R2 1
FASTCALL1 1 R2 L168
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1+
  114: assert(eq(math.sqrt(10)^2, 10))
L168: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.sqrt/1
LOADN R5 10
FASTCALL1 25 R5 L169
GETIMPORT R4 112 [math.sqrt]
CALL R4 1 1
L169: POWK R3 R4 K83 [2]
LOADN R4 10
CALL R2 2 -1
FASTCALL 1 L170
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  115: assert(eq(math.log10(2), math.log(2)/math.log(10)))
L170: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.log10/1
LOADN R4 2
FASTCALL1 16 R4 L171
GETIMPORT R3 114 [math.log10]
CALL R3 1 1
REMARK builtin math.log/1
L171: LOADN R6 2
FASTCALL1 17 R6 L172
GETIMPORT R5 116 [math.log]
CALL R5 1 1
REMARK builtin math.log/1
L172: LOADN R7 10
FASTCALL1 17 R7 L173
GETIMPORT R6 116 [math.log]
CALL R6 1 1
L173: DIV R4 R5 R6
CALL R2 2 -1
FASTCALL 1 L174
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  116: assert(eq(math.log(2, 2), 1))
L174: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.log/2
LOADN R4 2
FASTCALL2K 17 R4 K83 L175 [2]
LOADK R5 K83 [2]
GETIMPORT R3 116 [math.log]
CALL R3 2 1
L175: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L176
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  117: assert(eq(math.log(9, 3), 2))
L176: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.log/2
LOADN R4 9
FASTCALL2K 17 R4 K21 L177 [3]
LOADK R5 K21 [3]
GETIMPORT R3 116 [math.log]
CALL R3 2 1
L177: LOADN R4 2
CALL R2 2 -1
FASTCALL 1 L178
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  118: assert(eq(math.log(100, 10), 2))
L178: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.log/2
LOADN R4 100
FASTCALL2K 17 R4 K58 L179 [10]
LOADK R5 K58 [10]
GETIMPORT R3 116 [math.log]
CALL R3 2 1
L179: LOADN R4 2
CALL R2 2 -1
FASTCALL 1 L180
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  119: assert(eq(math.exp(0), 1))
L180: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.exp/1
LOADN R4 0
FASTCALL1 11 R4 L181
GETIMPORT R3 118 [math.exp]
CALL R3 1 1
L181: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L182
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  120: assert(eq(math.sin(10), math.sin(10%(2*math.pi))))
L182: GETGLOBAL R2 K73 ['eq']
REMARK builtin math.sin/1
LOADN R4 10
FASTCALL1 24 R4 L183
GETIMPORT R3 86 [math.sin]
CALL R3 1 1
REMARK builtin math.sin/1
L183: LOADN R6 10
LOADN R8 2
GETIMPORT R9 79 [math.pi]
MUL R7 R8 R9
MOD R5 R6 R7
FASTCALL1 24 R5 L184
GETIMPORT R4 86 [math.sin]
CALL R4 1 -1
L184: CALL R2 -1 -1
FASTCALL 1 L185
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin math.frexp/1
  121: local v,e = math.frexp(math.pi)
L185: GETIMPORT R2 79 [math.pi]
FASTCALL1 14 R2 L186
GETIMPORT R1 120 [math.frexp]
CALL R1 1 2
REMARK builtin assert/1+
  122: assert(eq(math.ldexp(v,e), math.pi))
L186: GETGLOBAL R4 K73 ['eq']
REMARK builtin math.ldexp/2
FASTCALL2 15 R1 R2 L187
MOVE R6 R1
MOVE R7 R2
GETIMPORT R5 122 [math.ldexp]
CALL R5 2 1
L187: GETIMPORT R6 79 [math.pi]
CALL R4 2 -1
FASTCALL 1 L188
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  124: assert(eq(math.tanh(3.5), math.sinh(3.5)/math.cosh(3.5)))
L188: GETGLOBAL R4 K73 ['eq']
REMARK builtin math.tanh/1
LOADK R6 K17 [3.5]
FASTCALL1 26 R6 L189
GETIMPORT R5 124 [math.tanh]
CALL R5 1 1
REMARK builtin math.sinh/1
L189: LOADK R8 K17 [3.5]
FASTCALL1 23 R8 L190
GETIMPORT R7 126 [math.sinh]
CALL R7 1 1
REMARK builtin math.cosh/1
L190: LOADK R9 K17 [3.5]
FASTCALL1 8 R9 L191
GETIMPORT R8 128 [math.cosh]
CALL R8 1 1
L191: DIV R6 R7 R8
CALL R4 2 -1
FASTCALL 1 L192
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1
  126: assert(tonumber(' 1.3e-2 ') == 1.3e-2)
L192: GETIMPORT R5 32 [tonumber]
LOADK R6 K129 [' 1.3e-2 ']
CALL R5 1 1
JUMPXEQKN R5 K130 L193 [0.012999999999999999]
LOADB R4 0 +1
L193: LOADB R4 1
L194: FASTCALL1 1 R4 L195
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  127: assert(tonumber(' -1.00000000000001 ') == -1.00000000000001)
L195: GETIMPORT R5 32 [tonumber]
LOADK R6 K131 [' -1.00000000000001 ']
CALL R5 1 1
JUMPXEQKN R5 K132 L196 [-1.00000000000001]
LOADB R4 0 +1
L196: LOADB R4 1
L197: FASTCALL1 1 R4 L198
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  131: assert(8388609 + -8388609 == 0)
L198: LOADB R4 1
FASTCALL1 1 R4 L199
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  132: assert(8388608 + -8388608 == 0)
L199: LOADB R4 1
FASTCALL1 1 R4 L200
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  133: assert(8388607 + -8388607 == 0)
L200: LOADB R4 1
FASTCALL1 1 R4 L201
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin rawget/2
  135: if rawget(_G, "_soft") then return end
L201: GETIMPORT R4 134 [_G]
FASTCALL2K 50 R4 K135 L202 ['_soft']
LOADK R5 K135 ['_soft']
GETIMPORT R3 137 [rawget]
CALL R3 2 1
L202: JUMPIFNOT R3 L203
RETURN R0 0
  137: f = "a = {"
L203: LOADK R3 K138 ['a = {']
SETGLOBAL R3 K28 ['f']
  138: i = 1
LOADN R3 1
SETGLOBAL R3 K139 ['i']
  140:   f = f .. "{" .. math.sin(i) .. ", " .. math.cos(i) .. ", " .. (i/3) .. "},\n"
L204: GETGLOBAL R4 K28 ['f']
LOADK R5 K140 ['{']
REMARK builtin math.sin/1
GETGLOBAL R13 K139 ['i']
FASTCALL1 24 R13 L205
GETIMPORT R12 86 [math.sin]
CALL R12 1 1
L205: MOVE R6 R12
LOADK R7 K141 [', ']
REMARK builtin math.cos/1
GETGLOBAL R13 K139 ['i']
FASTCALL1 9 R13 L206
GETIMPORT R12 88 [math.cos]
CALL R12 1 1
L206: MOVE R8 R12
LOADK R9 K141 [', ']
GETGLOBAL R12 K139 ['i']
DIVK R10 R12 K21 [3]
LOADK R11 K142 []
CONCAT R3 R4 R11
SETGLOBAL R3 K28 ['f']
  141:   i=i+1
GETGLOBAL R4 K139 ['i']
ADDK R3 R4 K40 [1]
SETGLOBAL R3 K139 ['i']
  142: until i > 1000
GETGLOBAL R3 K139 ['i']
LOADN R4 1000
JUMPIFLT R4 R3 L207
JUMPBACK L204
  143: f = f .. "}"
L207: GETGLOBAL R4 K28 ['f']
LOADK R5 K143 ['}']
CONCAT R3 R4 R5
SETGLOBAL R3 K28 ['f']
REMARK builtin assert/1+
  144: assert(loadstring(f))()
GETIMPORT R4 145 [loadstring]
GETGLOBAL R5 K28 ['f']
CALL R4 1 -1
FASTCALL 1 L208
GETIMPORT R3 11 [assert]
CALL R3 -1 1
L208: CALL R3 0 0
REMARK builtin assert/1+
  146: assert(eq(a[300][1], math.sin(300)))
GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
LOADN R8 300
GETTABLE R6 R7 R8
GETTABLEN R5 R6 1
REMARK builtin math.sin/1
LOADN R7 300
FASTCALL1 24 R7 L209
GETIMPORT R6 86 [math.sin]
CALL R6 1 -1
L209: CALL R4 -1 -1
FASTCALL 1 L210
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  147: assert(eq(a[600][1], math.sin(600)))
L210: GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
LOADN R8 600
GETTABLE R6 R7 R8
GETTABLEN R5 R6 1
REMARK builtin math.sin/1
LOADN R7 600
FASTCALL1 24 R7 L211
GETIMPORT R6 86 [math.sin]
CALL R6 1 -1
L211: CALL R4 -1 -1
FASTCALL 1 L212
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  148: assert(eq(a[500][2], math.cos(500)))
L212: GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
LOADN R8 500
GETTABLE R6 R7 R8
GETTABLEN R5 R6 2
REMARK builtin math.cos/1
LOADN R7 500
FASTCALL1 9 R7 L213
GETIMPORT R6 88 [math.cos]
CALL R6 1 -1
L213: CALL R4 -1 -1
FASTCALL 1 L214
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  149: assert(eq(a[800][2], math.cos(800)))
L214: GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
LOADN R8 800
GETTABLE R6 R7 R8
GETTABLEN R5 R6 2
REMARK builtin math.cos/1
LOADN R7 800
FASTCALL1 9 R7 L215
GETIMPORT R6 88 [math.cos]
CALL R6 1 -1
L215: CALL R4 -1 -1
FASTCALL 1 L216
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  150: assert(eq(a[200][3], 200/3))
L216: GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
GETTABLEN R6 R7 200
GETTABLEN R5 R6 3
LOADK R6 K146 [66.666666666666671]
CALL R4 2 -1
FASTCALL 1 L217
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  151: assert(eq(a[1000][3], 1000/3, 0.001))
L217: GETGLOBAL R4 K73 ['eq']
GETGLOBAL R7 K76 ['a']
LOADN R8 1000
GETTABLE R6 R7 R8
GETTABLEN R5 R6 3
LOADK R6 K147 [333.33333333333331]
LOADK R7 K80 [0.001]
CALL R4 3 -1
FASTCALL 1 L218
GETIMPORT R3 11 [assert]
CALL R3 -1 0
  152: print('+')
L218: GETIMPORT R3 1 [print]
LOADK R4 K148 ['+']
CALL R3 1 0
  155:   local NaN -- to avoid constant folding
LOADNIL R3
  156:   NaN = 10e500 - 10e400
LOADK R3 K149 [-nan(ind)]
REMARK builtin assert/1
  158:   assert(NaN ~= NaN)
JUMPIFNOTEQ R3 R3 L219
LOADB R5 0 +1
L219: LOADB R5 1
L220: FASTCALL1 1 R5 L221
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  159:   assert(not (NaN == NaN))
L221: JUMPIFEQ R3 R3 L222
LOADB R6 0 +1
L222: LOADB R6 1
L223: NOT R5 R6
FASTCALL1 1 R5 L224
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  161:   assert(not (NaN < NaN))
L224: JUMPIFLT R3 R3 L225
LOADB R6 0 +1
L225: LOADB R6 1
L226: NOT R5 R6
FASTCALL1 1 R5 L227
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  162:   assert(not (NaN <= NaN))
L227: JUMPIFLE R3 R3 L228
LOADB R6 0 +1
L228: LOADB R6 1
L229: NOT R5 R6
FASTCALL1 1 R5 L230
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  163:   assert(not (NaN > NaN))
L230: JUMPIFLT R3 R3 L231
LOADB R6 0 +1
L231: LOADB R6 1
L232: NOT R5 R6
FASTCALL1 1 R5 L233
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  164:   assert(not (NaN >= NaN))
L233: JUMPIFLE R3 R3 L234
LOADB R6 0 +1
L234: LOADB R6 1
L235: NOT R5 R6
FASTCALL1 1 R5 L236
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  166:   assert(not (0 == NaN))
L236: JUMPXEQKN R3 K9 L237 [0]
LOADB R6 0 +1
L237: LOADB R6 1
L238: NOT R5 R6
FASTCALL1 1 R5 L239
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  167:   assert(not (0 < NaN))
L239: LOADN R7 0
JUMPIFLT R7 R3 L240
LOADB R6 0 +1
L240: LOADB R6 1
L241: NOT R5 R6
FASTCALL1 1 R5 L242
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  168:   assert(not (0 <= NaN))
L242: LOADN R7 0
JUMPIFLE R7 R3 L243
LOADB R6 0 +1
L243: LOADB R6 1
L244: NOT R5 R6
FASTCALL1 1 R5 L245
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  169:   assert(not (0 > NaN))
L245: LOADN R7 0
JUMPIFLT R3 R7 L246
LOADB R6 0 +1
L246: LOADB R6 1
L247: NOT R5 R6
FASTCALL1 1 R5 L248
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  170:   assert(not (0 >= NaN))
L248: LOADN R7 0
JUMPIFLE R3 R7 L249
LOADB R6 0 +1
L249: LOADB R6 1
L250: NOT R5 R6
FASTCALL1 1 R5 L251
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  172:   assert(not (NaN == 0))
L251: JUMPXEQKN R3 K9 L252 [0]
LOADB R6 0 +1
L252: LOADB R6 1
L253: NOT R5 R6
FASTCALL1 1 R5 L254
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  173:   assert(not (NaN < 0))
L254: LOADN R7 0
JUMPIFLT R3 R7 L255
LOADB R6 0 +1
L255: LOADB R6 1
L256: NOT R5 R6
FASTCALL1 1 R5 L257
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  174:   assert(not (NaN <= 0))
L257: LOADN R7 0
JUMPIFLE R3 R7 L258
LOADB R6 0 +1
L258: LOADB R6 1
L259: NOT R5 R6
FASTCALL1 1 R5 L260
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  175:   assert(not (NaN > 0))
L260: LOADN R7 0
JUMPIFLT R7 R3 L261
LOADB R6 0 +1
L261: LOADB R6 1
L262: NOT R5 R6
FASTCALL1 1 R5 L263
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  176:   assert(not (NaN >= 0))
L263: LOADN R7 0
JUMPIFLE R7 R3 L264
LOADB R6 0 +1
L264: LOADB R6 1
L265: NOT R5 R6
FASTCALL1 1 R5 L266
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  178:   assert(if NaN < 0 then false else true)
L266: LOADN R6 0
JUMPIFNOTLT R3 R6 L267
LOADB R5 0
JUMP L268
L267: LOADB R5 1
L268: FASTCALL1 1 R5 L269
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  179:   assert(if NaN <= 0 then false else true)
L269: LOADN R6 0
JUMPIFNOTLE R3 R6 L270
LOADB R5 0
JUMP L271
L270: LOADB R5 1
L271: FASTCALL1 1 R5 L272
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  180:   assert(if NaN > 0 then false else true)
L272: LOADN R6 0
JUMPIFNOTLT R6 R3 L273
LOADB R5 0
JUMP L274
L273: LOADB R5 1
L274: FASTCALL1 1 R5 L275
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  181:   assert(if NaN >= 0 then false else true)
L275: LOADN R6 0
JUMPIFNOTLE R6 R3 L276
LOADB R5 0
JUMP L277
L276: LOADB R5 1
L277: FASTCALL1 1 R5 L278
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK allocation: table hash 0
  183:   local a = {}
L278: NEWTABLE R4 0 1
REMARK builtin assert/1
  184:   assert(not pcall(function () a[NaN] = 1 end))
GETIMPORT R7 30 [pcall]
REMARK allocation: closure with 2 upvalues
NEWCLOSURE R8 P3
CAPTURE VAL R4
CAPTURE REF R3
CALL R7 1 1
NOT R6 R7
FASTCALL1 1 R6 L279
GETIMPORT R5 11 [assert]
CALL R5 1 0
REMARK builtin assert/1
  185:   assert(a[NaN] == nil)
L279: GETTABLE R7 R4 R3
JUMPXEQKNIL R7 L280
LOADB R6 0 +1
L280: LOADB R6 1
L281: FASTCALL1 1 R6 L282
GETIMPORT R5 11 [assert]
CALL R5 1 0
  186:   a[1] = 1
L282: LOADN R5 1
SETTABLEN R5 R4 1
REMARK builtin assert/1
  187:   assert(not pcall(function () a[NaN] = 1 end))
GETIMPORT R7 30 [pcall]
REMARK allocation: closure with 2 upvalues
NEWCLOSURE R8 P4
CAPTURE VAL R4
CAPTURE REF R3
CALL R7 1 1
NOT R6 R7
FASTCALL1 1 R6 L283
GETIMPORT R5 11 [assert]
CALL R5 1 0
REMARK builtin assert/1
  188:   assert(a[NaN] == nil)
L283: GETTABLE R7 R4 R3
JUMPXEQKNIL R7 L284
LOADB R6 0 +1
L284: LOADB R6 1
L285: FASTCALL1 1 R6 L286
GETIMPORT R5 11 [assert]
CALL R5 1 0
L286: CLOSEUPVALS R3
  194: a = nil
LOADNIL R3
SETGLOBAL R3 K76 ['a']
REMARK builtin assert/1
  199: assert(a*b == 200 and a+b == 30 and a-b == -10 and a/b == 0.5 and -b == -20)
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K150 ['20']
MUL R5 R6 R7
JUMPXEQKN R5 K151 L288 NOT [200]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K150 ['20']
ADD R5 R6 R7
JUMPXEQKN R5 K152 L288 NOT [30]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K150 ['20']
SUB R5 R6 R7
JUMPXEQKN R5 K153 L288 NOT [-10]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K150 ['20']
DIV R5 R6 R7
JUMPXEQKN R5 K22 L288 NOT [0.5]
LOADK R6 K150 ['20']
MINUS R5 R6
JUMPXEQKN R5 K154 L287 [-20]
LOADB R4 0 +1
L287: LOADB R4 1
L288: FASTCALL1 1 R4 L289
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  200: assert(a == '10' and b == '20')
L289: LOADB R4 1
FASTCALL1 1 R4 L290
GETIMPORT R3 11 [assert]
CALL R3 1 0
  203: math.randomseed(0)
L290: GETIMPORT R3 156 [math.randomseed]
LOADN R4 0
CALL R3 1 0
  205: local i = 0
LOADN R3 0
  206: local Max = 0
LOADN R4 0
  207: local Min = 2
LOADN R5 2
  209:   local t = math.random()
L291: GETIMPORT R6 158 [math.random]
CALL R6 0 1
REMARK builtin math.max/2
  210:   Max = math.max(Max, t)
FASTCALL2 18 R4 R6 L292
MOVE R8 R4
MOVE R9 R6
GETIMPORT R7 160 [math.max]
CALL R7 2 1
L292: MOVE R4 R7
REMARK builtin math.min/2
  211:   Min = math.min(Min, t)
FASTCALL2 19 R5 R6 L293
MOVE R8 R5
MOVE R9 R6
GETIMPORT R7 162 [math.min]
CALL R7 2 1
L293: MOVE R5 R7
  212:   i=i+1
ADDK R3 R3 K40 [1]
  213:   flag = eq(Max, 1, 0.001) and eq(Min, 0, 0.001)
GETGLOBAL R7 K73 ['eq']
MOVE R8 R4
LOADN R9 1
LOADK R10 K80 [0.001]
CALL R7 3 1
JUMPIFNOT R7 L294
GETGLOBAL R7 K73 ['eq']
MOVE R8 R5
LOADN R9 0
LOADK R10 K80 [0.001]
CALL R7 3 1
L294: SETGLOBAL R7 K163 ['flag']
  214: until flag or i>10000
GETGLOBAL R7 K163 ['flag']
JUMPIF R7 L295
LOADN R7 10000
JUMPIFLT R7 R3 L295
JUMPBACK L291
REMARK builtin assert/1
  215: assert(0 <= Min and Max<1)
L295: LOADB R7 0
LOADN R8 0
JUMPIFNOTLE R8 R5 L297
LOADN R8 1
JUMPIFLT R4 R8 L296
LOADB R7 0 +1
L296: LOADB R7 1
L297: FASTCALL1 1 R7 L298
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  216: assert(flag);
L298: GETGLOBAL R7 K163 ['flag']
FASTCALL1 1 R7 L299
GETIMPORT R6 11 [assert]
CALL R6 1 0
  218: for i=1,10 do
L299: LOADN R8 1
LOADN R6 10
LOADN R7 1
FORNPREP R6 L304
  219:   local t = math.random(5)
L300: GETIMPORT R9 158 [math.random]
LOADN R10 5
CALL R9 1 1
REMARK builtin assert/1
  220:   assert(1 <= t and t <= 5)
LOADB R11 0
LOADN R12 1
JUMPIFNOTLE R12 R9 L302
LOADN R12 5
JUMPIFLE R9 R12 L301
LOADB R11 0 +1
L301: LOADB R11 1
L302: FASTCALL1 1 R11 L303
GETIMPORT R10 11 [assert]
CALL R10 1 0
  218: for i=1,10 do
L303: FORNLOOP R6 L300
  223: i = 0
L304: LOADN R3 0
  224: Max = -200
LOADN R4 -200
  225: Min = 200
LOADN R5 200
  227:   local t = math.random(-10,0)
L305: GETIMPORT R6 158 [math.random]
LOADN R7 -10
LOADN R8 0
CALL R6 2 1
REMARK builtin math.max/2
  228:   Max = math.max(Max, t)
FASTCALL2 18 R4 R6 L306
MOVE R8 R4
MOVE R9 R6
GETIMPORT R7 160 [math.max]
CALL R7 2 1
L306: MOVE R4 R7
REMARK builtin math.min/2
  229:   Min = math.min(Min, t)
FASTCALL2 19 R5 R6 L307
MOVE R8 R5
MOVE R9 R6
GETIMPORT R7 162 [math.min]
CALL R7 2 1
L307: MOVE R5 R7
  230:   i=i+1
ADDK R3 R3 K40 [1]
  231:   flag = (Max == 0 and Min == -10)
LOADB R7 0
JUMPXEQKN R4 K9 L309 NOT [0]
JUMPXEQKN R5 K153 L308 [-10]
LOADB R7 0 +1
L308: LOADB R7 1
L309: SETGLOBAL R7 K163 ['flag']
  232: until flag or i>10000
GETGLOBAL R7 K163 ['flag']
JUMPIF R7 L310
LOADN R7 10000
JUMPIFLT R7 R3 L310
JUMPBACK L305
REMARK builtin assert/1
  233: assert(-10 <= Min and Max<=0)
L310: LOADB R7 0
LOADN R8 -10
JUMPIFNOTLE R8 R5 L312
LOADN R8 0
JUMPIFLE R4 R8 L311
LOADB R7 0 +1
L311: LOADB R7 1
L312: FASTCALL1 1 R7 L313
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  234: assert(flag);
L313: GETGLOBAL R7 K163 ['flag']
FASTCALL1 1 R7 L314
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1+
  236: assert(select(2, pcall(math.random, 1, 2, 3)):match("wrong number of arguments"))
L314: GETIMPORT R7 165 [select]
LOADN R8 2
GETIMPORT R9 30 [pcall]
GETIMPORT R10 158 [math.random]
LOADN R11 1
LOADN R12 2
LOADN R13 3
CALL R9 4 -1
CALL R7 -1 1
LOADK R9 K166 ['wrong number of arguments']
NAMECALL R7 R7 K167 ['match']
CALL R7 2 -1
FASTCALL 1 L315
GETIMPORT R6 11 [assert]
CALL R6 -1 0
REMARK builtin assert/1
REMARK builtin math.min/1
  239: assert(math.min(1) == 1)
L315: LOADN R9 1
FASTCALL1 19 R9 L316
GETIMPORT R8 162 [math.min]
CALL R8 1 1
L316: JUMPXEQKN R8 K40 L317 [1]
LOADB R7 0 +1
L317: LOADB R7 1
L318: FASTCALL1 1 R7 L319
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  240: assert(math.min(1, 2) == 1)
L319: LOADN R9 1
FASTCALL2K 19 R9 K83 L320 [2]
LOADK R10 K83 [2]
GETIMPORT R8 162 [math.min]
CALL R8 2 1
L320: JUMPXEQKN R8 K40 L321 [1]
LOADB R7 0 +1
L321: LOADB R7 1
L322: FASTCALL1 1 R7 L323
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  241: assert(math.min(1, 2, -1) == -1)
L323: LOADN R9 1
LOADN R10 2
LOADN R11 -1
FASTCALL 19 L324
GETIMPORT R8 162 [math.min]
CALL R8 3 1
L324: JUMPXEQKN R8 K38 L325 [-1]
LOADB R7 0 +1
L325: LOADB R7 1
L326: FASTCALL1 1 R7 L327
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  242: assert(math.min(1, -1, 2) == -1)
L327: LOADN R9 1
LOADN R10 -1
LOADN R11 2
FASTCALL 19 L328
GETIMPORT R8 162 [math.min]
CALL R8 3 1
L328: JUMPXEQKN R8 K38 L329 [-1]
LOADB R7 0 +1
L329: LOADB R7 1
L330: FASTCALL1 1 R7 L331
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/1
  243: assert(math.max(1) == 1)
L331: LOADN R9 1
FASTCALL1 18 R9 L332
GETIMPORT R8 160 [math.max]
CALL R8 1 1
L332: JUMPXEQKN R8 K40 L333 [1]
LOADB R7 0 +1
L333: LOADB R7 1
L334: FASTCALL1 1 R7 L335
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  244: assert(math.max(1, 2) == 2)
L335: LOADN R9 1
FASTCALL2K 18 R9 K83 L336 [2]
LOADK R10 K83 [2]
GETIMPORT R8 160 [math.max]
CALL R8 2 1
L336: JUMPXEQKN R8 K83 L337 [2]
LOADB R7 0 +1
L337: LOADB R7 1
L338: FASTCALL1 1 R7 L339
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  245: assert(math.max(1, 2, -1) == 2)
L339: LOADN R9 1
LOADN R10 2
LOADN R11 -1
FASTCALL 18 L340
GETIMPORT R8 160 [math.max]
CALL R8 3 1
L340: JUMPXEQKN R8 K83 L341 [2]
LOADB R7 0 +1
L341: LOADB R7 1
L342: FASTCALL1 1 R7 L343
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  246: assert(math.max(1, -1, 2) == 2)
L343: LOADN R9 1
LOADN R10 -1
LOADN R11 2
FASTCALL 18 L344
GETIMPORT R8 160 [math.max]
CALL R8 3 1
L344: JUMPXEQKN R8 K83 L345 [2]
LOADB R7 0 +1
L345: LOADB R7 1
L346: FASTCALL1 1 R7 L347
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  249: assert(math.noise(0.5) == 0)
L347: GETIMPORT R8 169 [math.noise]
LOADK R9 K22 [0.5]
CALL R8 1 1
JUMPXEQKN R8 K9 L348 [0]
LOADB R7 0 +1
L348: LOADB R7 1
L349: FASTCALL1 1 R7 L350
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  250: assert(math.noise(0.5, 0.5) == -0.25)
L350: GETIMPORT R8 169 [math.noise]
LOADK R9 K22 [0.5]
LOADK R10 K22 [0.5]
CALL R8 2 1
JUMPXEQKN R8 K170 L351 [-0.25]
LOADB R7 0 +1
L351: LOADB R7 1
L352: FASTCALL1 1 R7 L353
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  251: assert(math.noise(0.5, 0.5, -0.5) == 0.125)
L353: GETIMPORT R8 169 [math.noise]
LOADK R9 K22 [0.5]
LOADK R10 K22 [0.5]
LOADK R11 K171 [-0.5]
CALL R8 3 1
JUMPXEQKN R8 K172 L354 [0.125]
LOADB R7 0 +1
L354: LOADB R7 1
L355: FASTCALL1 1 R7 L356
GETIMPORT R6 11 [assert]
CALL R6 1 0
  253: local inf = math.huge * 2
L356: GETIMPORT R7 24 [math.huge]
MULK R6 R7 K83 [2]
REMARK builtin assert/1
REMARK builtin math.sign/1
  257: assert(math.sign(0) == 0)
LOADN R10 0
FASTCALL1 47 R10 L357
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L357: JUMPXEQKN R9 K9 L358 [0]
LOADB R8 0 +1
L358: LOADB R8 1
L359: FASTCALL1 1 R8 L360
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  258: assert(math.sign(42) == 1)
L360: LOADN R10 42
FASTCALL1 47 R10 L361
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L361: JUMPXEQKN R9 K40 L362 [1]
LOADB R8 0 +1
L362: LOADB R8 1
L363: FASTCALL1 1 R8 L364
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  259: assert(math.sign(-42) == -1)
L364: LOADN R10 -42
FASTCALL1 47 R10 L365
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L365: JUMPXEQKN R9 K38 L366 [-1]
LOADB R8 0 +1
L366: LOADB R8 1
L367: FASTCALL1 1 R8 L368
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  260: assert(math.sign(inf) == 1)
L368: FASTCALL1 47 R6 L369
MOVE R10 R6
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L369: JUMPXEQKN R9 K40 L370 [1]
LOADB R8 0 +1
L370: LOADB R8 1
L371: FASTCALL1 1 R8 L372
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  261: assert(math.sign(-inf) == -1)
L372: MINUS R10 R6
FASTCALL1 47 R10 L373
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L373: JUMPXEQKN R9 K38 L374 [-1]
LOADB R8 0 +1
L374: LOADB R8 1
L375: FASTCALL1 1 R8 L376
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  262: assert(math.sign(nan) == 0)
L376: LOADK R10 K149 [-nan(ind)]
FASTCALL1 47 R10 L377
GETIMPORT R9 174 [math.sign]
CALL R9 1 1
L377: JUMPXEQKN R9 K9 L378 [0]
LOADB R8 0 +1
L378: LOADB R8 1
L379: FASTCALL1 1 R8 L380
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  265: assert(math.clamp(-1, 0, 1) == 0)
L380: LOADN R10 -1
LOADN R11 0
LOADN R12 1
FASTCALL 46 L381
GETIMPORT R9 176 [math.clamp]
CALL R9 3 1
L381: JUMPXEQKN R9 K9 L382 [0]
LOADB R8 0 +1
L382: LOADB R8 1
L383: FASTCALL1 1 R8 L384
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  266: assert(math.clamp(0.5, 0, 1) == 0.5)
L384: LOADK R10 K22 [0.5]
LOADN R11 0
LOADN R12 1
FASTCALL 46 L385
GETIMPORT R9 176 [math.clamp]
CALL R9 3 1
L385: JUMPXEQKN R9 K22 L386 [0.5]
LOADB R8 0 +1
L386: LOADB R8 1
L387: FASTCALL1 1 R8 L388
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  267: assert(math.clamp(2, 0, 1) == 1)
L388: LOADN R10 2
LOADN R11 0
LOADN R12 1
FASTCALL 46 L389
GETIMPORT R9 176 [math.clamp]
CALL R9 3 1
L389: JUMPXEQKN R9 K40 L390 [1]
LOADB R8 0 +1
L390: LOADB R8 1
L391: FASTCALL1 1 R8 L392
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  268: assert(math.clamp(4, 0, 0) == 0)
L392: LOADN R10 4
LOADN R11 0
LOADN R12 0
FASTCALL 46 L393
GETIMPORT R9 176 [math.clamp]
CALL R9 3 1
L393: JUMPXEQKN R9 K9 L394 [0]
LOADB R8 0 +1
L394: LOADB R8 1
L395: FASTCALL1 1 R8 L396
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  271: assert(math.round(0) == 0)
L396: LOADN R10 0
FASTCALL1 48 R10 L397
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L397: JUMPXEQKN R9 K9 L398 [0]
LOADB R8 0 +1
L398: LOADB R8 1
L399: FASTCALL1 1 R8 L400
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  272: assert(math.round(0.4) == 0)
L400: LOADK R10 K179 [0.40000000000000002]
FASTCALL1 48 R10 L401
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L401: JUMPXEQKN R9 K9 L402 [0]
LOADB R8 0 +1
L402: LOADB R8 1
L403: FASTCALL1 1 R8 L404
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  273: assert(math.round(0.5) == 1)
L404: LOADK R10 K22 [0.5]
FASTCALL1 48 R10 L405
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L405: JUMPXEQKN R9 K40 L406 [1]
LOADB R8 0 +1
L406: LOADB R8 1
L407: FASTCALL1 1 R8 L408
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  274: assert(math.round(3.5) == 4)
L408: LOADK R10 K17 [3.5]
FASTCALL1 48 R10 L409
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L409: JUMPXEQKN R9 K89 L410 [4]
LOADB R8 0 +1
L410: LOADB R8 1
L411: FASTCALL1 1 R8 L412
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  275: assert(math.round(-0.4) == 0)
L412: LOADK R10 K180 [-0.40000000000000002]
FASTCALL1 48 R10 L413
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L413: JUMPXEQKN R9 K9 L414 [0]
LOADB R8 0 +1
L414: LOADB R8 1
L415: FASTCALL1 1 R8 L416
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  276: assert(math.round(-0.5) == -1)
L416: LOADK R10 K171 [-0.5]
FASTCALL1 48 R10 L417
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L417: JUMPXEQKN R9 K38 L418 [-1]
LOADB R8 0 +1
L418: LOADB R8 1
L419: FASTCALL1 1 R8 L420
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  277: assert(math.round(-3.5) == -4)
L420: LOADK R10 K181 [-3.5]
FASTCALL1 48 R10 L421
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L421: JUMPXEQKN R9 K182 L422 [-4]
LOADB R8 0 +1
L422: LOADB R8 1
L423: FASTCALL1 1 R8 L424
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  278: assert(math.round(math.huge) == math.huge)
L424: GETIMPORT R10 24 [math.huge]
FASTCALL1 48 R10 L425
GETIMPORT R9 178 [math.round]
CALL R9 1 1
L425: GETIMPORT R10 24 [math.huge]
JUMPIFEQ R9 R10 L426
LOADB R8 0 +1
L426: LOADB R8 1
L427: FASTCALL1 1 R8 L428
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  281: assert(math.fmod(3, 2) == 1)
L428: LOADN R10 3
FASTCALL2K 13 R10 K83 L429 [2]
LOADK R11 K83 [2]
GETIMPORT R9 184 [math.fmod]
CALL R9 2 1
L429: JUMPXEQKN R9 K40 L430 [1]
LOADB R8 0 +1
L430: LOADB R8 1
L431: FASTCALL1 1 R8 L432
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  282: assert(math.fmod(-3, 2) == -1)
L432: LOADN R10 -3
FASTCALL2K 13 R10 K83 L433 [2]
LOADK R11 K83 [2]
GETIMPORT R9 184 [math.fmod]
CALL R9 2 1
L433: JUMPXEQKN R9 K38 L434 [-1]
LOADB R8 0 +1
L434: LOADB R8 1
L435: FASTCALL1 1 R8 L436
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  283: assert(math.fmod(3, -2) == 1)
L436: LOADN R10 3
FASTCALL2K 13 R10 K185 L437 [-2]
LOADK R11 K185 [-2]
GETIMPORT R9 184 [math.fmod]
CALL R9 2 1
L437: JUMPXEQKN R9 K40 L438 [1]
LOADB R8 0 +1
L438: LOADB R8 1
L439: FASTCALL1 1 R8 L440
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  284: assert(math.fmod(-3, -2) == -1)
L440: LOADN R10 -3
FASTCALL2K 13 R10 K185 L441 [-2]
LOADK R11 K185 [-2]
GETIMPORT R9 184 [math.fmod]
CALL R9 2 1
L441: JUMPXEQKN R9 K38 L442 [-1]
LOADB R8 0 +1
L442: LOADB R8 1
L443: FASTCALL1 1 R8 L444
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  287: assert(math.pow(2, 0) == 1)
L444: LOADN R10 2
FASTCALL2K 21 R10 K9 L445 [0]
LOADK R11 K9 [0]
GETIMPORT R9 187 [math.pow]
CALL R9 2 1
L445: JUMPXEQKN R9 K40 L446 [1]
LOADB R8 0 +1
L446: LOADB R8 1
L447: FASTCALL1 1 R8 L448
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  288: assert(math.pow(2, 2) == 4)
L448: LOADN R10 2
FASTCALL2K 21 R10 K83 L449 [2]
LOADK R11 K83 [2]
GETIMPORT R9 187 [math.pow]
CALL R9 2 1
L449: JUMPXEQKN R9 K89 L450 [4]
LOADB R8 0 +1
L450: LOADB R8 1
L451: FASTCALL1 1 R8 L452
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  289: assert(math.pow(4, 0.5) == 2)
L452: LOADN R10 4
FASTCALL2K 21 R10 K22 L453 [0.5]
LOADK R11 K22 [0.5]
GETIMPORT R9 187 [math.pow]
CALL R9 2 1
L453: JUMPXEQKN R9 K83 L454 [2]
LOADB R8 0 +1
L454: LOADB R8 1
L455: FASTCALL1 1 R8 L456
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  290: assert(math.pow(-2, 2) == 4)
L456: LOADN R10 -2
FASTCALL2K 21 R10 K83 L457 [2]
LOADK R11 K83 [2]
GETIMPORT R9 187 [math.pow]
CALL R9 2 1
L457: JUMPXEQKN R9 K89 L458 [4]
LOADB R8 0 +1
L458: LOADB R8 1
L459: FASTCALL1 1 R8 L460
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
  291: assert(tostring(math.pow(-2, 0.5)) == "nan")
L460: GETIMPORT R9 189 [tostring]
REMARK builtin math.pow/2
LOADN R11 -2
FASTCALL2K 21 R11 K22 L461 [0.5]
LOADK R12 K22 [0.5]
GETIMPORT R10 187 [math.pow]
CALL R10 2 -1
L461: CALL R9 -1 1
JUMPXEQKS R9 K190 L462 ['nan']
LOADB R8 0 +1
L462: LOADB R8 1
L463: FASTCALL1 1 R8 L464
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.abs/1
  295: assert(math.abs("-4") == 4)
L464: LOADK R10 K191 ['-4']
FASTCALL1 2 R10 L465
GETIMPORT R9 103 [math.abs]
CALL R9 1 1
L465: JUMPXEQKN R9 K89 L466 [4]
LOADB R8 0 +1
L466: LOADB R8 1
L467: FASTCALL1 1 R8 L468
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.acos/1
  296: assert(math.acos("1") == 0)
L468: LOADK R10 K63 ['1']
FASTCALL1 3 R10 L469
GETIMPORT R9 95 [math.acos]
CALL R9 1 1
L469: JUMPXEQKN R9 K9 L470 [0]
LOADB R8 0 +1
L470: LOADB R8 1
L471: FASTCALL1 1 R8 L472
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.asin/1
  297: assert(math.asin("0") == 0)
L472: LOADK R10 K192 ['0']
FASTCALL1 4 R10 L473
GETIMPORT R9 97 [math.asin]
CALL R9 1 1
L473: JUMPXEQKN R9 K9 L474 [0]
LOADB R8 0 +1
L474: LOADB R8 1
L475: FASTCALL1 1 R8 L476
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.atan2/2
  298: assert(math.atan2("0", "0") == 0)
L476: LOADK R10 K192 ['0']
FASTCALL2K 5 R10 K192 L477 ['0']
LOADK R11 K192 ['0']
GETIMPORT R9 105 [math.atan2]
CALL R9 2 1
L477: JUMPXEQKN R9 K9 L478 [0]
LOADB R8 0 +1
L478: LOADB R8 1
L479: FASTCALL1 1 R8 L480
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.atan/1
  299: assert(math.atan("0") == 0)
L480: LOADK R10 K192 ['0']
FASTCALL1 6 R10 L481
GETIMPORT R9 93 [math.atan]
CALL R9 1 1
L481: JUMPXEQKN R9 K9 L482 [0]
LOADB R8 0 +1
L482: LOADB R8 1
L483: FASTCALL1 1 R8 L484
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.ceil/1
  300: assert(math.ceil("1.5") == 2)
L484: LOADK R10 K193 ['1.5']
FASTCALL1 7 R10 L485
GETIMPORT R9 108 [math.ceil]
CALL R9 1 1
L485: JUMPXEQKN R9 K83 L486 [2]
LOADB R8 0 +1
L486: LOADB R8 1
L487: FASTCALL1 1 R8 L488
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.cosh/1
  301: assert(math.cosh("0") == 1)
L488: LOADK R10 K192 ['0']
FASTCALL1 8 R10 L489
GETIMPORT R9 128 [math.cosh]
CALL R9 1 1
L489: JUMPXEQKN R9 K40 L490 [1]
LOADB R8 0 +1
L490: LOADB R8 1
L491: FASTCALL1 1 R8 L492
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.cos/1
  302: assert(math.cos("0") == 1)
L492: LOADK R10 K192 ['0']
FASTCALL1 9 R10 L493
GETIMPORT R9 88 [math.cos]
CALL R9 1 1
L493: JUMPXEQKN R9 K40 L494 [1]
LOADB R8 0 +1
L494: LOADB R8 1
L495: FASTCALL1 1 R8 L496
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.deg/1
  303: assert(math.deg("0") == 0)
L496: LOADK R10 K192 ['0']
FASTCALL1 10 R10 L497
GETIMPORT R9 99 [math.deg]
CALL R9 1 1
L497: JUMPXEQKN R9 K9 L498 [0]
LOADB R8 0 +1
L498: LOADB R8 1
L499: FASTCALL1 1 R8 L500
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.exp/1
  304: assert(math.exp("0") == 1)
L500: LOADK R10 K192 ['0']
FASTCALL1 11 R10 L501
GETIMPORT R9 118 [math.exp]
CALL R9 1 1
L501: JUMPXEQKN R9 K40 L502 [1]
LOADB R8 0 +1
L502: LOADB R8 1
L503: FASTCALL1 1 R8 L504
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.floor/1
  305: assert(math.floor("1.5") == 1)
L504: LOADK R10 K193 ['1.5']
FASTCALL1 12 R10 L505
GETIMPORT R9 110 [math.floor]
CALL R9 1 1
L505: JUMPXEQKN R9 K40 L506 [1]
LOADB R8 0 +1
L506: LOADB R8 1
L507: FASTCALL1 1 R8 L508
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  306: assert(math.fmod("1.5", 1) == 0.5)
L508: LOADK R10 K193 ['1.5']
FASTCALL2K 13 R10 K40 L509 [1]
LOADK R11 K40 [1]
GETIMPORT R9 184 [math.fmod]
CALL R9 2 1
L509: JUMPXEQKN R9 K22 L510 [0.5]
LOADB R8 0 +1
L510: LOADB R8 1
L511: FASTCALL1 1 R8 L512
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin math.frexp/1
  307: local v,e = math.frexp("1.5")
L512: LOADK R8 K193 ['1.5']
FASTCALL1 14 R8 L513
GETIMPORT R7 120 [math.frexp]
CALL R7 1 2
REMARK builtin assert/1
  308: assert(v == 0.75 and e == 1)
L513: LOADB R10 0
JUMPXEQKN R7 K194 L515 NOT [0.75]
JUMPXEQKN R8 K40 L514 [1]
LOADB R10 0 +1
L514: LOADB R10 1
L515: FASTCALL1 1 R10 L516
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.ldexp/2
  309: assert(math.ldexp("0.75", 1) == 1.5)
L516: LOADK R12 K195 ['0.75']
FASTCALL2K 15 R12 K40 L517 [1]
LOADK R13 K40 [1]
GETIMPORT R11 122 [math.ldexp]
CALL R11 2 1
L517: JUMPXEQKN R11 K196 L518 [1.5]
LOADB R10 0 +1
L518: LOADB R10 1
L519: FASTCALL1 1 R10 L520
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log10/1
  310: assert(math.log10("10") == 1)
L520: LOADK R12 K7 ['10']
FASTCALL1 16 R12 L521
GETIMPORT R11 114 [math.log10]
CALL R11 1 1
L521: JUMPXEQKN R11 K40 L522 [1]
LOADB R10 0 +1
L522: LOADB R10 1
L523: FASTCALL1 1 R10 L524
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/1
  311: assert(math.log("0") == -inf)
L524: LOADK R12 K192 ['0']
FASTCALL1 17 R12 L525
GETIMPORT R11 116 [math.log]
CALL R11 1 1
L525: MINUS R12 R6
JUMPIFEQ R11 R12 L526
LOADB R10 0 +1
L526: LOADB R10 1
L527: FASTCALL1 1 R10 L528
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  312: assert(math.log("8", 2) == 3)
L528: LOADK R12 K197 ['8']
FASTCALL2K 17 R12 K83 L529 [2]
LOADK R13 K83 [2]
GETIMPORT R11 116 [math.log]
CALL R11 2 1
L529: JUMPXEQKN R11 K21 L530 [3]
LOADB R10 0 +1
L530: LOADB R10 1
L531: FASTCALL1 1 R10 L532
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  313: assert(math.log("10", 10) == 1)
L532: LOADK R12 K7 ['10']
FASTCALL2K 17 R12 K58 L533 [10]
LOADK R13 K58 [10]
GETIMPORT R11 116 [math.log]
CALL R11 2 1
L533: JUMPXEQKN R11 K40 L534 [1]
LOADB R10 0 +1
L534: LOADB R10 1
L535: FASTCALL1 1 R10 L536
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  314: assert(math.log("9", 3) == 2)
L536: LOADK R12 K198 ['9']
FASTCALL2K 17 R12 K21 L537 [3]
LOADK R13 K21 [3]
GETIMPORT R11 116 [math.log]
CALL R11 2 1
L537: JUMPXEQKN R11 K83 L538 [2]
LOADB R10 0 +1
L538: LOADB R10 1
L539: FASTCALL1 1 R10 L540
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  315: assert(math.max("1", 2) == 2)
L540: LOADK R12 K63 ['1']
FASTCALL2K 18 R12 K83 L541 [2]
LOADK R13 K83 [2]
GETIMPORT R11 160 [math.max]
CALL R11 2 1
L541: JUMPXEQKN R11 K83 L542 [2]
LOADB R10 0 +1
L542: LOADB R10 1
L543: FASTCALL1 1 R10 L544
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  316: assert(math.max(2, "1") == 2)
L544: LOADN R12 2
FASTCALL2K 18 R12 K63 L545 ['1']
LOADK R13 K63 ['1']
GETIMPORT R11 160 [math.max]
CALL R11 2 1
L545: JUMPXEQKN R11 K83 L546 [2]
LOADB R10 0 +1
L546: LOADB R10 1
L547: FASTCALL1 1 R10 L548
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  317: assert(math.max(1, 2, "3") == 3)
L548: LOADN R12 1
LOADN R13 2
LOADK R14 K199 ['3']
FASTCALL 18 L549
GETIMPORT R11 160 [math.max]
CALL R11 3 1
L549: JUMPXEQKN R11 K21 L550 [3]
LOADB R10 0 +1
L550: LOADB R10 1
L551: FASTCALL1 1 R10 L552
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  318: assert(math.min("1", 2) == 1)
L552: LOADK R12 K63 ['1']
FASTCALL2K 19 R12 K83 L553 [2]
LOADK R13 K83 [2]
GETIMPORT R11 162 [math.min]
CALL R11 2 1
L553: JUMPXEQKN R11 K40 L554 [1]
LOADB R10 0 +1
L554: LOADB R10 1
L555: FASTCALL1 1 R10 L556
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  319: assert(math.min(2, "1") == 1)
L556: LOADN R12 2
FASTCALL2K 19 R12 K63 L557 ['1']
LOADK R13 K63 ['1']
GETIMPORT R11 162 [math.min]
CALL R11 2 1
L557: JUMPXEQKN R11 K40 L558 [1]
LOADB R10 0 +1
L558: LOADB R10 1
L559: FASTCALL1 1 R10 L560
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  320: assert(math.min(1, 2, "3") == 1)
L560: LOADN R12 1
LOADN R13 2
LOADK R14 K199 ['3']
FASTCALL 19 L561
GETIMPORT R11 162 [math.min]
CALL R11 3 1
L561: JUMPXEQKN R11 K40 L562 [1]
LOADB R10 0 +1
L562: LOADB R10 1
L563: FASTCALL1 1 R10 L564
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin math.modf/1
  321: local v,f = math.modf("1.5")
L564: LOADK R10 K193 ['1.5']
FASTCALL1 20 R10 L565
GETIMPORT R9 20 [math.modf]
CALL R9 1 2
REMARK builtin assert/1
  322: assert(v == 1 and f == 0.5)
L565: LOADB R12 0
JUMPXEQKN R9 K40 L567 NOT [1]
JUMPXEQKN R10 K22 L566 [0.5]
LOADB R12 0 +1
L566: LOADB R12 1
L567: FASTCALL1 1 R12 L568
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  323: assert(math.pow("2", 2) == 4)
L568: LOADK R14 K3 ['2']
FASTCALL2K 21 R14 K83 L569 [2]
LOADK R15 K83 [2]
GETIMPORT R13 187 [math.pow]
CALL R13 2 1
L569: JUMPXEQKN R13 K89 L570 [4]
LOADB R12 0 +1
L570: LOADB R12 1
L571: FASTCALL1 1 R12 L572
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.rad/1
  324: assert(math.rad("0") == 0)
L572: LOADK R14 K192 ['0']
FASTCALL1 22 R14 L573
GETIMPORT R13 101 [math.rad]
CALL R13 1 1
L573: JUMPXEQKN R13 K9 L574 [0]
LOADB R12 0 +1
L574: LOADB R12 1
L575: FASTCALL1 1 R12 L576
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sinh/1
  325: assert(math.sinh("0") == 0)
L576: LOADK R14 K192 ['0']
FASTCALL1 23 R14 L577
GETIMPORT R13 126 [math.sinh]
CALL R13 1 1
L577: JUMPXEQKN R13 K9 L578 [0]
LOADB R12 0 +1
L578: LOADB R12 1
L579: FASTCALL1 1 R12 L580
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sin/1
  326: assert(math.sin("0") == 0)
L580: LOADK R14 K192 ['0']
FASTCALL1 24 R14 L581
GETIMPORT R13 86 [math.sin]
CALL R13 1 1
L581: JUMPXEQKN R13 K9 L582 [0]
LOADB R12 0 +1
L582: LOADB R12 1
L583: FASTCALL1 1 R12 L584
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sqrt/1
  327: assert(math.sqrt("4") == 2)
L584: LOADK R14 K200 ['4']
FASTCALL1 25 R14 L585
GETIMPORT R13 112 [math.sqrt]
CALL R13 1 1
L585: JUMPXEQKN R13 K83 L586 [2]
LOADB R12 0 +1
L586: LOADB R12 1
L587: FASTCALL1 1 R12 L588
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.tanh/1
  328: assert(math.tanh("0") == 0)
L588: LOADK R14 K192 ['0']
FASTCALL1 26 R14 L589
GETIMPORT R13 124 [math.tanh]
CALL R13 1 1
L589: JUMPXEQKN R13 K9 L590 [0]
LOADB R12 0 +1
L590: LOADB R12 1
L591: FASTCALL1 1 R12 L592
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.tan/1
  329: assert(math.tan("0") == 0)
L592: LOADK R14 K192 ['0']
FASTCALL1 27 R14 L593
GETIMPORT R13 91 [math.tan]
CALL R13 1 1
L593: JUMPXEQKN R13 K9 L594 [0]
LOADB R12 0 +1
L594: LOADB R12 1
L595: FASTCALL1 1 R12 L596
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  330: assert(math.clamp("0", 2, 3) == 2)
L596: LOADK R14 K192 ['0']
LOADN R15 2
LOADN R16 3
FASTCALL 46 L597
GETIMPORT R13 176 [math.clamp]
CALL R13 3 1
L597: JUMPXEQKN R13 K83 L598 [2]
LOADB R12 0 +1
L598: LOADB R12 1
L599: FASTCALL1 1 R12 L600
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  331: assert(math.clamp("4", 2, 3) == 3)
L600: LOADK R14 K200 ['4']
LOADN R15 2
LOADN R16 3
FASTCALL 46 L601
GETIMPORT R13 176 [math.clamp]
CALL R13 3 1
L601: JUMPXEQKN R13 K21 L602 [3]
LOADB R12 0 +1
L602: LOADB R12 1
L603: FASTCALL1 1 R12 L604
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  332: assert(math.sign("2") == 1)
L604: LOADK R14 K3 ['2']
FASTCALL1 47 R14 L605
GETIMPORT R13 174 [math.sign]
CALL R13 1 1
L605: JUMPXEQKN R13 K40 L606 [1]
LOADB R12 0 +1
L606: LOADB R12 1
L607: FASTCALL1 1 R12 L608
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  333: assert(math.sign("-2") == -1)
L608: LOADK R14 K201 ['-2']
FASTCALL1 47 R14 L609
GETIMPORT R13 174 [math.sign]
CALL R13 1 1
L609: JUMPXEQKN R13 K38 L610 [-1]
LOADB R12 0 +1
L610: LOADB R12 1
L611: FASTCALL1 1 R12 L612
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  334: assert(math.sign("0") == 0)
L612: LOADK R14 K192 ['0']
FASTCALL1 47 R14 L613
GETIMPORT R13 174 [math.sign]
CALL R13 1 1
L613: JUMPXEQKN R13 K9 L614 [0]
LOADB R12 0 +1
L614: LOADB R12 1
L615: FASTCALL1 1 R12 L616
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  335: assert(math.round("1.8") == 2)
L616: LOADK R14 K202 ['1.8']
FASTCALL1 48 R14 L617
GETIMPORT R13 178 [math.round]
CALL R13 1 1
L617: JUMPXEQKN R13 K83 L618 [2]
LOADB R12 0 +1
L618: LOADB R12 1
L619: FASTCALL1 1 R12 L620
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  338: assert(select('#', math.floor(1.4)) == 1)
L620: GETIMPORT R13 165 [select]
LOADK R14 K203 ['#']
REMARK builtin math.floor/1
LOADK R16 K204 [1.3999999999999999]
FASTCALL1 12 R16 L621
GETIMPORT R15 110 [math.floor]
CALL R15 1 -1
L621: CALL R13 -1 1
JUMPXEQKN R13 K40 L622 [1]
LOADB R12 0 +1
L622: LOADB R12 1
L623: FASTCALL1 1 R12 L624
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  339: assert(select('#', math.ceil(1.6)) == 1)
L624: GETIMPORT R13 165 [select]
LOADK R14 K203 ['#']
REMARK builtin math.ceil/1
LOADK R16 K205 [1.6000000000000001]
FASTCALL1 7 R16 L625
GETIMPORT R15 108 [math.ceil]
CALL R15 1 -1
L625: CALL R13 -1 1
JUMPXEQKN R13 K40 L626 [1]
LOADB R12 0 +1
L626: LOADB R12 1
L627: FASTCALL1 1 R12 L628
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  340: assert(select('#', math.sqrt(9)) == 1)
L628: GETIMPORT R13 165 [select]
LOADK R14 K203 ['#']
REMARK builtin math.sqrt/1
LOADN R16 9
FASTCALL1 25 R16 L629
GETIMPORT R15 112 [math.sqrt]
CALL R15 1 -1
L629: CALL R13 -1 1
JUMPXEQKN R13 K40 L630 [1]
LOADB R12 0 +1
L630: LOADB R12 1
L631: FASTCALL1 1 R12 L632
GETIMPORT R11 11 [assert]
CALL R11 1 0
  342: print('OK')
L632: GETIMPORT R11 1 [print]
LOADK R12 K206 ['OK']
CALL R11 1 0
  343: 
RETURN R0 0

]]
end